!pip install lxml
!pip install wordcloud
!pip install nltk
import random
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
%matplotlib inline

import seaborn as sns

from sklearn import (linear_model, metrics, neural_network, pipeline, preprocessing, model_selection)

from bs4 import BeautifulSoup
import nltk
import string
from nltk.tokenize import RegexpTokenizer
from nltk.tokenize import word_tokenize
nltk.download('stopwords')
nltk.download('wordnet')

from wordcloud import WordCloud

types = pd.read_csv("MBTI_type.csv")
posts = pd.read_csv("MBTI_posts.csv")

sep_posts = posts['posts'].str.split("\|\|\|", expand = True)

def shift(row):
    row = row.dropna()
    row = pd.Series(row.values)
    return row

def remove_first_apostrophe(s):
    if s[0] == "'":
        post = s[1:]
    else:
        post = s
    return post

sep_posts = sep_posts.apply(lambda x: x.str.strip()).replace('', np.nan).dropna(how='all', axis=1)
sep_posts2 = sep_posts.apply(shift, axis = 1)

sep_posts2[0] = sep_posts2[0].apply(remove_first_apostrophe)
sep_posts2.iloc[:, -1] = sep_posts2.iloc[:, -1].apply(lambda x: x[:-1] if isinstance(x, str) else x)

data = pd.concat([types, sep_posts2], axis=1)


data['favorite world'] = data['type'].apply(lambda x: 'Extrovert' if x[0] == 'E' else 'Introvert')
data['Information'] = data['type'].apply(lambda x: 'Intuitive' if x[1] == 'N' else 'Sensing')
data['Decisions'] = data['type'].apply(lambda x: 'Thinking' if x[2] == 'T' else 'Feeling')
data['Structure'] = data['type'].apply(lambda x: 'Judging' if x[3] == 'J' else 'Perceiving')

columns = range(0, 59)
data['posts'] = data[columns].stack().groupby(level=0).agg(' '.join)
data_wc = data.drop(columns, axis=1)


def gen_wc(posts, title):
    wordcloud = WordCloud(background_color='white').generate(posts)
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(title)
    plt.show()

# Extrovert vs Introvert
E_I = data_wc.groupby('favorite world')['posts'].apply(' '.join).reset_index()
gen_wc(E_I["posts"].values[0], "Extrovert")
gen_wc(E_I["posts"].values[1], "Introvert")

# Intuitive vs Sensing
N_S = data_wc.groupby('information')['posts'].apply(' '.join).reset_index()
gen_wc(N_S.loc[0,"posts"], "Intuitive")
gen_wc(N_S.loc[1,"posts"], "Sensing")

# Thinking vs Feeling
T_F = data_wc.groupby('decision')['posts'].apply(' '.join).reset_index().rename(columns={'decision':'type'})
gen_wc(T_F.loc[0,"posts"], "Thinking")
gen_wc(T_F.loc[1,"posts"], "Feeling")

# Judging vs Perceiving
J_P = data_wc.groupby('structure')['posts'].apply(' '.join).reset_index().rename(columns={'structure':'type'})
gen_wc(J_P.loc[0,"posts"], "Judging")
gen_wc(J_P.loc[1,"posts"], "Perceiving")
